(function() {
  'use strict';
  var cache, commonDatas, defaultLang, extend, i18n, pageDatas, translationsPath;
  defaultLang = 'en_US';
  i18n = false;
  translationsPath = false;
  pageDatas = false;
  commonDatas = {};
  cache = {};
  extend = function(object, properties) {
    var key, val;
    for (key in properties) {
      val = properties[key];
      object[key] = val;
    }
    return object;
  };
  angular.module('jed', []);
  angular.module('jed').factory('i18n', [
    '$http', '$rootScope', '$q', function($http, $rootScope, $q) {
      var get, jed, readyDeferred, setI18N;
      readyDeferred = $q.defer();
      get = function(file) {
        var deferred, varName;
        deferred = $q.defer();
        varName = file.replace('.json', '');
        if (window.translations && window.translations[varName]) {
          deferred.resolve(JSON.parse(window.translations[varName]));
        } else if (file in cache) {
          deferred.resolve(cache[file]);
        } else {
          $http.get("" + translationsPath + "/" + file).success(function(data) {
            cache[file] = data;
            return deferred.resolve(data);
          }).error(function() {
            return deferred.reject();
          });
        }
        return deferred.promise;
      };
      setI18N = function(data) {
        if (data == null) {
          data = false;
        }
        i18n = data ? new Jed(data) : void 0;
        $rootScope._ = function(key) {
          return jed._(key);
        };
        return $rootScope._n = function(singular_key, plural_key, value) {
          return jed._n(singular_key, plural_key, value);
        };
      };
      return jed = {
        setTranslationPath: function(path) {
          translationsPath = path;
          return jed;
        },
        setLang: function(value) {
          var lang;
          lang = value;
          return jed;
        },
        setDefaultLang: function(lang) {
          defaultLang = lang;
          return jed;
        },
        loadCommon: function(common) {
          var deferred;
          deferred = $q.defer();
          get("" + common + "-" + lang + ".json").then(function(data) {
            commonDatas = extend(commonDatas, data.locale_data.messages);
            if (pageDatas) {
              pageDatas.locale_data.messages = extend(pageDatas.locale_data.messages, commonDatas);
              setI18N(pageDatas);
            } else {
              setI18N(data);
            }
            readyDeferred.resolve();
            return deferred.resolve();
          }, function() {
            readyDeferred.resolve();
            return deferred.resolve();
          });
          return deferred.promise;
        },
        loadPage: function(page) {
          var deferred;
          deferred = $q.defer();
          get("" + page + "-" + lang + ".json").then(function(data) {
            data.locale_data.messages = extend(data.locale_data.messages, commonDatas);
            pageDatas = data;
            setI18N(data);
            readyDeferred.resolve();
            return deferred.resolve();
          }, function() {
            if (lang === defaultLang) {
              setI18N();
            } else {
              jed.loadPage(page);
            }
            readyDeferred.resolve();
            return deferred.resolve();
          });
          return deferred.promise;
        },
        _: function(key) {
          if (i18n) {
            return i18n.gettext(key);
          } else {
            return key;
          }
        },
        _n: function(singular_key, plural_key, value) {
          if (i18n) {
            return i18n.ngettext(singular_key, plural_key, value);
          } else {
            if (value === 1) {
              return singular_key;
            } else {
              return plural_key;
            }
          }
        },
        ready: function() {
          return readyDeferred.promise;
        }
      };
    }
  ]);
  return angular.module('jed').directive('trans', [
    'i18n', function(i18n) {
      return {
        restrict: 'E',
        replace: true,
        scope: {
          singular: '@',
          plural: '@',
          none: '@',
          count: '=',
          placeholders: '='
        },
        template: '<span>{{ result }}</span>',
        controller: function($scope, $element) {
          var key, name, ready, render, watchObjects, _count, _placeholders, _ref;
          ready = false;
          _.templateSettings.interpolate = /%([\s\S]+?)%/g;
          _placeholders = {};
          _count = 0;
          i18n.ready().then(function() {
            ready = true;
            return render(_count, _placeholders);
          });
          render = function(count, placeholders) {
            var result;
            _count = count;
            _placeholders = placeholders;
            if (!ready) {
              return;
            }
            if ($scope.count.toString() === '0' && $scope.none) {
              result = i18n._($scope.none);
            } else {
              result = i18n._n($scope.singular, $scope.plural, count);
            }
            return $scope.result = _.template(result, placeholders);
          };
          watchObjects = ['count'];
          _ref = Object.keys($scope.placeholders);
          for (key in _ref) {
            name = _ref[key];
            watchObjects.push("placeholders." + name);
          }
          return $scope.$watchGroup(watchObjects, function() {
            if (typeof parseInt($scope.count) !== 'number' || $scope.count === '') {
              return;
            }
            return render($scope.count, $scope.placeholders);
          });
        }
      };
    }
  ]);
})();

//# sourceMappingURL=data:application/json;base64,