(function() {
  'use strict';
  var cache, commonDatas, defaultLang, extend, gettext, i18n, lang, ngettext, pageDatas, translationsPath;
  defaultLang = 'en_US';
  lang = defaultLang;
  i18n = false;
  translationsPath = false;
  pageDatas = false;
  commonDatas = {};
  cache = {};
  extend = function(object, properties) {
    var key, val;
    for (key in properties) {
      val = properties[key];
      object[key] = val;
    }
    return object;
  };
  gettext = function(key) {
    if (i18n) {
      return i18n.gettext(key);
    } else {
      return key;
    }
  };
  ngettext = function(singular_key, plural_key, value) {
    if (i18n) {
      return i18n.ngettext(singular_key, plural_key, value);
    } else {
      if (value === 1) {
        return singular_key;
      } else {
        return plural_key;
      }
    }
  };
  angular.module('jed', []);
  angular.module('jed').factory('i18n', [
    '$http', '$rootScope', '$q', function($http, $rootScope, $q) {
      var get, jed, readyDeferred, setI18N;
      readyDeferred = $q.defer();
      get = function(file) {
        var deferred, varName;
        deferred = $q.defer();
        varName = file.replace('.json', '');
        if (window.translations && window.translations[varName]) {
          deferred.resolve(JSON.parse(window.translations[varName]));
        } else if (file in cache) {
          deferred.resolve(cache[file]);
        } else {
          $http.get("" + translationsPath + "/" + file).success(function(data) {
            cache[file] = data;
            return deferred.resolve(data);
          }).error(function() {
            return deferred.reject();
          });
        }
        return deferred.promise;
      };
      setI18N = function(data) {
        if (data == null) {
          data = false;
        }
        i18n = data ? new Jed(data) : void 0;
        $rootScope._ = function(key) {
          return jed._(key);
        };
        return $rootScope._n = function(singular_key, plural_key, value, placeholders, none) {
          return jed._n(singular_key, plural_key, value, placeholders, none);
        };
      };
      return jed = {
        setTranslationPath: function(path) {
          translationsPath = path;
          return jed;
        },
        setLang: function(value) {
          lang = value;
          return jed;
        },
        setDefaultLang: function(lang) {
          defaultLang = lang;
          return jed;
        },
        loadCommon: function(common) {
          var deferred;
          deferred = $q.defer();
          get("" + common + "-" + lang + ".json").then(function(data) {
            commonDatas = extend(commonDatas, data.locale_data.messages);
            if (pageDatas) {
              pageDatas.locale_data.messages = extend(pageDatas.locale_data.messages, commonDatas);
              setI18N(pageDatas);
            } else {
              setI18N(data);
            }
            readyDeferred.resolve();
            return deferred.resolve();
          }, function() {
            readyDeferred.resolve();
            return deferred.resolve();
          });
          return deferred.promise;
        },
        loadPage: function(page) {
          var deferred;
          deferred = $q.defer();
          get("" + page + "-" + lang + ".json").then(function(data) {
            data.locale_data.messages = extend(data.locale_data.messages, commonDatas);
            pageDatas = data;
            setI18N(data);
            readyDeferred.resolve();
            return deferred.resolve();
          }, function() {
            if (lang === defaultLang) {
              setI18N();
            } else {
              jed.loadPage(page);
            }
            readyDeferred.resolve();
            return deferred.resolve();
          });
          return deferred.promise;
        },
        _: function(key, placeholders) {
          var result;
          if (placeholders == null) {
            placeholders = {};
          }
          result = gettext(key);
          return _.template(result, placeholders, {
            interpolate: /%([\s\S]+?)%/g
          });
        },
        _n: function(singular, plural, count, placeholders, none) {
          var result;
          if (placeholders == null) {
            placeholders = {};
          }
          placeholders.count = count;
          if (count.toString() === '0' && none) {
            result = gettext(none);
          } else {
            result = ngettext(singular, plural, count);
          }
          return _.template(result, placeholders, {
            interpolate: /%([\s\S]+?)%/g
          });
        },
        ready: function() {
          return readyDeferred.promise;
        }
      };
    }
  ]);
  angular.module('jed').directive('trans', [
    'i18n', function(i18n) {
      return {
        restrict: 'E',
        replace: true,
        scope: {
          singular: '@',
          plural: '@',
          none: '@',
          count: '=',
          placeholders: '='
        },
        template: '<span>{{ result }}</span>',
        controller: function($scope, $element) {
          var key, name, ready, render, watchObjects, _count, _placeholders, _ref;
          ready = false;
          _placeholders = {};
          _count = 0;
          if ($scope.placeholders == null) {
            $scope.placeholders = {};
          }
          i18n.ready().then(function() {
            ready = true;
            return render(_count, _placeholders);
          });
          render = function(count, placeholders) {
            if (placeholders == null) {
              placeholders = {};
            }
            _count = count;
            _placeholders = placeholders;
            if (!ready) {
              return;
            }
            if (!Object.keys(placeholders).length) {
              return;
            }
            return $scope.result = i18n._n($scope.singular, $scope.plural, count, $scope.placeholders, $scope.none);
          };
          watchObjects = ['count'];
          if (Object.keys($scope.placeholders).length) {
            _ref = Object.keys($scope.placeholders);
            for (key in _ref) {
              name = _ref[key];
              watchObjects.push("placeholders." + name);
            }
          }
          return $scope.$watchGroup(watchObjects, function() {
            if (typeof parseInt($scope.count) !== 'number' || $scope.count === '') {
              return;
            }
            return render($scope.count, $scope.placeholders);
          });
        }
      };
    }
  ]);
  return angular.module('jed').filter('trans', function(i18n) {
    var transFilter;
    transFilter = function(text, options) {
      if (options == null) {
        options = {};
      }
      if (options.plural) {
        return i18n._n(text, options.plural, options.count, options.placeholders, options.none);
      } else {
        if (options.placeholders == null) {
          options.placeholders = {};
        }
        return i18n._(text, options.placeholders);
      }
    };
    transFilter.$stateful = true;
    return transFilter;
  });
})();

//# sourceMappingURL=data:application/json;base64,