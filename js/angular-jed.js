(function() {
  'use strict';
  var cache, commonDatas, defaultLang, extend, i18n, lang, pageDatas, translationsPath;
  defaultLang = 'en_US';
  lang = defaultLang;
  i18n = false;
  translationsPath = false;
  pageDatas = false;
  commonDatas = {};
  cache = {};
  extend = function(object, properties) {
    var key, val;
    for (key in properties) {
      val = properties[key];
      object[key] = val;
    }
    return object;
  };
  angular.module('jed', []);
  angular.module('jed').factory('i18n', [
    '$http', '$rootScope', '$q', function($http, $rootScope, $q) {
      var get, jed, readyDeferred, setI18N;
      readyDeferred = $q.defer();
      get = function(file) {
        var deferred, varName;
        deferred = $q.defer();
        varName = file.replace('.json', '');
        if (window.translations && window.translations[varName]) {
          deferred.resolve(JSON.parse(window.translations[varName]));
        } else if (file in cache) {
          deferred.resolve(cache[file]);
        } else {
          $http.get("" + translationsPath + "/" + file).success(function(data) {
            cache[file] = data;
            return deferred.resolve(data);
          }).error(function() {
            return deferred.reject();
          });
        }
        return deferred.promise;
      };
      setI18N = function(data) {
        if (data == null) {
          data = false;
        }
        i18n = data ? new Jed(data) : void 0;
        $rootScope._ = function(key) {
          return jed._(key);
        };
        return $rootScope._n = function(singular_key, plural_key, value) {
          return jed._n(singular_key, plural_key, value);
        };
      };
      return jed = {
        setTranslationPath: function(path) {
          translationsPath = path;
          return jed;
        },
        setLang: function(value) {
          lang = value;
          return jed;
        },
        setDefaultLang: function(lang) {
          defaultLang = lang;
          return jed;
        },
        loadCommon: function(common) {
          var deferred;
          deferred = $q.defer();
          get("" + common + "-" + lang + ".json").then(function(data) {
            commonDatas = extend(commonDatas, data.locale_data.messages);
            if (pageDatas) {
              pageDatas.locale_data.messages = extend(pageDatas.locale_data.messages, commonDatas);
              setI18N(pageDatas);
            } else {
              setI18N(data);
            }
            readyDeferred.resolve();
            return deferred.resolve();
          }, function() {
            readyDeferred.resolve();
            return deferred.resolve();
          });
          return deferred.promise;
        },
        loadPage: function(page) {
          var deferred;
          deferred = $q.defer();
          get("" + page + "-" + lang + ".json").then(function(data) {
            data.locale_data.messages = extend(data.locale_data.messages, commonDatas);
            pageDatas = data;
            setI18N(data);
            readyDeferred.resolve();
            return deferred.resolve();
          }, function() {
            if (lang === defaultLang) {
              setI18N();
            } else {
              jed.loadPage(page);
            }
            readyDeferred.resolve();
            return deferred.resolve();
          });
          return deferred.promise;
        },
        _: function(key) {
          if (i18n) {
            return i18n.gettext(key);
          } else {
            return key;
          }
        },
        _n: function(singular_key, plural_key, value) {
          if (i18n) {
            return i18n.ngettext(singular_key, plural_key, value);
          } else {
            if (value === 1) {
              return singular_key;
            } else {
              return plural_key;
            }
          }
        },
        ready: function() {
          return readyDeferred.promise;
        }
      };
    }
  ]);
  return angular.module('jed').directive('trans', [
    'i18n', function(i18n) {
      return {
        restrict: 'E',
        replace: true,
        scope: {
          singular: '@',
          plural: '@',
          none: '@',
          count: '=',
          placeholders: '='
        },
        template: '<span>{{ result }}</span>',
        controller: function($scope, $element) {
          var key, name, ready, render, watchObjects, _count, _placeholders, _ref;
          ready = false;
          _placeholders = {};
          _count = 0;
          i18n.ready().then(function() {
            ready = true;
            return render(_count, _placeholders);
          });
          render = function(count, placeholders) {
            var result;
            _count = count;
            _placeholders = placeholders;
            if (!ready) {
              return;
            }
            if (!Object.keys($scope.placeholders).length) {
              return;
            }
            if ($scope.count.toString() === '0' && $scope.none) {
              result = i18n._($scope.none);
            } else {
              result = i18n._n($scope.singular, $scope.plural, count);
            }
            return $scope.result = _.template(result, placeholders, {
              interpolate: /%([\s\S]+?)%/g
            });
          };
          watchObjects = ['count'];
          _ref = Object.keys($scope.placeholders);
          for (key in _ref) {
            name = _ref[key];
            watchObjects.push("placeholders." + name);
          }
          return $scope.$watchGroup(watchObjects, function() {
            if (typeof parseInt($scope.count) !== 'number' || $scope.count === '') {
              return;
            }
            return render($scope.count, $scope.placeholders);
          });
        }
      };
    }
  ]);
})();

//# sourceMappingURL=data:application/json;base64,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QmYsQ0FBQTtBQXVCQTtBQUFBLGVBQUEsV0FBQTs2QkFBQTtBQUNFLFlBQUEsWUFBWSxDQUFDLElBQWIsQ0FBbUIsZUFBQSxHQUFlLElBQWxDLENBQUEsQ0FERjtBQUFBLFdBdkJBO2lCQTBCQSxNQUFNLENBQUMsV0FBUCxDQUFtQixZQUFuQixFQUFpQyxTQUFBLEdBQUE7QUFDL0IsWUFBQSxJQUFHLE1BQUEsQ0FBQSxRQUFPLENBQVMsTUFBTSxDQUFDLEtBQWhCLENBQVAsS0FBaUMsUUFBakMsSUFBNkMsTUFBTSxDQUFDLEtBQVAsS0FBZ0IsRUFBaEU7QUFDRSxvQkFBQSxDQURGO2FBQUE7bUJBR0EsTUFBQSxDQUFPLE1BQU0sQ0FBQyxLQUFkLEVBQXFCLE1BQU0sQ0FBQyxZQUE1QixFQUorQjtVQUFBLENBQWpDLEVBM0JVO1FBQUEsQ0FUWjtPQURGLENBREY7SUFBQSxDQUZ1QztHQUF6QyxFQXJIRDtBQUFBLENBQUQsQ0FBQSxDQUFBLENBQUEsQ0FBQSIsImZpbGUiOiJhbmd1bGFyLWplZC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIigtPlxuICAndXNlIHN0cmljdCdcblxuICBkZWZhdWx0TGFuZyA9ICdlbl9VUydcbiAgbGFuZyA9IGRlZmF1bHRMYW5nXG4gIGkxOG4gPSBmYWxzZVxuICB0cmFuc2xhdGlvbnNQYXRoID0gZmFsc2VcbiAgcGFnZURhdGFzID0gZmFsc2VcbiAgY29tbW9uRGF0YXMgPSB7fVxuICBjYWNoZSA9IHt9XG5cbiAgZXh0ZW5kID0gKG9iamVjdCwgcHJvcGVydGllcykgLT5cbiAgICBmb3Iga2V5LCB2YWwgb2YgcHJvcGVydGllc1xuICAgICAgb2JqZWN0W2tleV0gPSB2YWxcbiAgICBvYmplY3RcblxuICBhbmd1bGFyLm1vZHVsZSAnamVkJywgW11cblxuICBhbmd1bGFyLm1vZHVsZSgnamVkJykuZmFjdG9yeSAnaTE4bicsIFtcbiAgICAnJGh0dHAnXG4gICAgJyRyb290U2NvcGUnXG4gICAgJyRxJ1xuICAgICgkaHR0cCwgJHJvb3RTY29wZSwgJHEpIC0+XG4gICAgICByZWFkeURlZmVycmVkID0gJHEuZGVmZXIoKVxuXG4gICAgICAjIEdldCBhIHRyYW5zbGF0aW9uIGZpbGUgZnJvbSBjYWNoZSBvciBhamF4XG4gICAgICBnZXQgPSAoZmlsZSkgLT5cbiAgICAgICAgZGVmZXJyZWQgPSAkcS5kZWZlcigpXG4gICAgICAgIHZhck5hbWUgPSBmaWxlLnJlcGxhY2UoJy5qc29uJywgJycpXG4gICAgICAgIGlmIHdpbmRvdy50cmFuc2xhdGlvbnMgYW5kIHdpbmRvdy50cmFuc2xhdGlvbnNbdmFyTmFtZV1cbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKEpTT04ucGFyc2Ugd2luZG93LnRyYW5zbGF0aW9uc1t2YXJOYW1lXSlcbiAgICAgICAgZWxzZSBpZiBmaWxlIG9mIGNhY2hlXG4gICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShjYWNoZVtmaWxlXSlcbiAgICAgICAgZWxzZVxuICAgICAgICAgICRodHRwLmdldChcIiN7dHJhbnNsYXRpb25zUGF0aH0vI3tmaWxlfVwiKVxuICAgICAgICAgICAgLnN1Y2Nlc3MgKGRhdGEpIC0+XG4gICAgICAgICAgICAgIGNhY2hlW2ZpbGVdID0gZGF0YVxuICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGRhdGEpXG4gICAgICAgICAgICAuZXJyb3IgLT5cbiAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KClcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2VcblxuICAgICAgIyBJbml0aWFsaXplIEplZFxuICAgICAgc2V0STE4TiA9IChkYXRhID0gZmFsc2UpIC0+XG4gICAgICAgIGkxOG4gPSBpZiBkYXRhIHRoZW4gbmV3IEplZChkYXRhKVxuXG4gICAgICAgICRyb290U2NvcGUuXyA9IChrZXkpIC0+XG4gICAgICAgICAgamVkLl8oa2V5KVxuXG4gICAgICAgICRyb290U2NvcGUuX24gPSAoc2luZ3VsYXJfa2V5LCBwbHVyYWxfa2V5LCB2YWx1ZSkgLT5cbiAgICAgICAgICBqZWQuX24oc2luZ3VsYXJfa2V5LCBwbHVyYWxfa2V5LCB2YWx1ZSlcblxuICAgICAgIyBQdWJsaWMgQVBJXG4gICAgICBqZWQgPVxuICAgICAgICBzZXRUcmFuc2xhdGlvblBhdGg6IChwYXRoKSAtPlxuICAgICAgICAgIHRyYW5zbGF0aW9uc1BhdGggPSBwYXRoXG4gICAgICAgICAgamVkXG5cbiAgICAgICAgc2V0TGFuZzogKHZhbHVlKSAtPlxuICAgICAgICAgIGxhbmcgPSB2YWx1ZVxuICAgICAgICAgIGplZFxuXG4gICAgICAgIHNldERlZmF1bHRMYW5nOiAobGFuZykgLT5cbiAgICAgICAgICBkZWZhdWx0TGFuZyA9IGxhbmdcbiAgICAgICAgICBqZWRcblxuICAgICAgICAjIExvYWQgY29tbW9uIHRyYW5zbGF0aW9uc1xuICAgICAgICBsb2FkQ29tbW9uOiAoY29tbW9uKSAtPlxuICAgICAgICAgIGRlZmVycmVkID0gJHEuZGVmZXIoKVxuICAgICAgICAgIGdldChcIiN7Y29tbW9ufS0je2xhbmd9Lmpzb25cIikudGhlbigoZGF0YSkgLT5cbiAgICAgICAgICAgICMgbm90IHN1cmUgdGhpcyBpcyBuZWVkZWQgdGhvXG4gICAgICAgICAgICBjb21tb25EYXRhcyA9IGV4dGVuZCBjb21tb25EYXRhcywgZGF0YS5sb2NhbGVfZGF0YS5tZXNzYWdlc1xuICAgICAgICAgICAgaWYgcGFnZURhdGFzXG4gICAgICAgICAgICAgIHBhZ2VEYXRhcy5sb2NhbGVfZGF0YS5tZXNzYWdlcyA9IGV4dGVuZCBwYWdlRGF0YXMubG9jYWxlX2RhdGEubWVzc2FnZXMsIGNvbW1vbkRhdGFzXG4gICAgICAgICAgICAgIHNldEkxOE4gcGFnZURhdGFzXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIHNldEkxOE4gZGF0YVxuICAgICAgICAgICAgcmVhZHlEZWZlcnJlZC5yZXNvbHZlKClcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoKVxuICAgICAgICAgICwgLT5cbiAgICAgICAgICAgIHJlYWR5RGVmZXJyZWQucmVzb2x2ZSgpXG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKClcbiAgICAgICAgICApXG4gICAgICAgICAgZGVmZXJyZWQucHJvbWlzZVxuXG4gICAgICAgICMgTG9hZCBwYWdlIHRyYW5zbGF0aW9uXG4gICAgICAgIGxvYWRQYWdlOiAocGFnZSkgLT5cbiAgICAgICAgICBkZWZlcnJlZCA9ICRxLmRlZmVyKClcbiAgICAgICAgICBnZXQoXCIje3BhZ2V9LSN7bGFuZ30uanNvblwiKS50aGVuKChkYXRhKSAtPlxuICAgICAgICAgICAgZGF0YS5sb2NhbGVfZGF0YS5tZXNzYWdlcyA9IGV4dGVuZCBkYXRhLmxvY2FsZV9kYXRhLm1lc3NhZ2VzLCBjb21tb25EYXRhc1xuICAgICAgICAgICAgcGFnZURhdGFzID0gZGF0YVxuICAgICAgICAgICAgc2V0STE4TiBkYXRhXG4gICAgICAgICAgICByZWFkeURlZmVycmVkLnJlc29sdmUoKVxuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpXG4gICAgICAgICAgLCAtPlxuICAgICAgICAgICAgaWYgbGFuZyA9PSBkZWZhdWx0TGFuZ1xuICAgICAgICAgICAgICBzZXRJMThOKClcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgamVkLmxvYWRQYWdlKHBhZ2UpXG4gICAgICAgICAgICByZWFkeURlZmVycmVkLnJlc29sdmUoKVxuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpXG4gICAgICAgICAgKVxuICAgICAgICAgIGRlZmVycmVkLnByb21pc2VcblxuICAgICAgICBfOiAoa2V5KSAtPlxuICAgICAgICAgIGlmIGkxOG4gdGhlbiBpMThuLmdldHRleHQoa2V5KSBlbHNlIGtleVxuXG4gICAgICAgIF9uOiAoc2luZ3VsYXJfa2V5LCBwbHVyYWxfa2V5LCB2YWx1ZSkgLT5cbiAgICAgICAgICBpZiBpMThuXG4gICAgICAgICAgICBpMThuLm5nZXR0ZXh0IHNpbmd1bGFyX2tleSwgcGx1cmFsX2tleSwgdmFsdWVcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBpZiB2YWx1ZSA9PSAxIHRoZW4gc2luZ3VsYXJfa2V5IGVsc2UgcGx1cmFsX2tleVxuXG4gICAgICAgIHJlYWR5OiAtPlxuICAgICAgICAgIHJlYWR5RGVmZXJyZWQucHJvbWlzZVxuICBdXG5cbiAgYW5ndWxhci5tb2R1bGUoJ2plZCcpLmRpcmVjdGl2ZSAndHJhbnMnLCBbXG4gICAgJ2kxOG4nXG4gICAgKGkxOG4pIC0+XG4gICAgICByZXR1cm4gKFxuICAgICAgICByZXN0cmljdDogJ0UnXG4gICAgICAgIHJlcGxhY2U6IHRydWVcbiAgICAgICAgc2NvcGU6XG4gICAgICAgICAgc2luZ3VsYXI6ICdAJ1xuICAgICAgICAgIHBsdXJhbDogJ0AnXG4gICAgICAgICAgbm9uZTogJ0AnXG4gICAgICAgICAgY291bnQ6ICc9J1xuICAgICAgICAgIHBsYWNlaG9sZGVyczogJz0nXG4gICAgICAgIHRlbXBsYXRlOiAnPHNwYW4+e3sgcmVzdWx0IH19PC9zcGFuPidcbiAgICAgICAgY29udHJvbGxlcjogKCRzY29wZSwgJGVsZW1lbnQpIC0+XG4gICAgICAgICAgcmVhZHkgPSBmYWxzZTtcbiAgICAgICAgICBfcGxhY2Vob2xkZXJzID0ge31cbiAgICAgICAgICBfY291bnQgPSAwXG5cbiAgICAgICAgICBpMThuLnJlYWR5KCkudGhlbiAtPlxuICAgICAgICAgICAgcmVhZHkgPSB0cnVlXG4gICAgICAgICAgICByZW5kZXIoX2NvdW50LCBfcGxhY2Vob2xkZXJzKVxuXG4gICAgICAgICAgcmVuZGVyID0gKGNvdW50LCBwbGFjZWhvbGRlcnMpIC0+XG4gICAgICAgICAgICBfY291bnQgPSBjb3VudFxuICAgICAgICAgICAgX3BsYWNlaG9sZGVycyA9IHBsYWNlaG9sZGVyc1xuICAgICAgICAgICAgcmV0dXJuIHVubGVzcyByZWFkeVxuICAgICAgICAgICAgcmV0dXJuIHVubGVzcyBPYmplY3Qua2V5cygkc2NvcGUucGxhY2Vob2xkZXJzKS5sZW5ndGhcbiAgICAgICAgICAgIGlmICRzY29wZS5jb3VudC50b1N0cmluZygpID09ICcwJyBhbmQgJHNjb3BlLm5vbmVcbiAgICAgICAgICAgICAgcmVzdWx0ID0gaTE4bi5fICRzY29wZS5ub25lXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIHJlc3VsdCA9IGkxOG4uX24gJHNjb3BlLnNpbmd1bGFyLCAkc2NvcGUucGx1cmFsLCBjb3VudFxuICAgICAgICAgICAgJHNjb3BlLnJlc3VsdCA9IF8udGVtcGxhdGUocmVzdWx0LCBwbGFjZWhvbGRlcnMsXG4gICAgICAgICAgICAgIGludGVycG9sYXRlOiAvJShbXFxzXFxTXSs/KSUvZ1xuICAgICAgICAgICAgKVxuXG4gICAgICAgICAgd2F0Y2hPYmplY3RzID0gWydjb3VudCddXG5cbiAgICAgICAgICBmb3Iga2V5LCBuYW1lIG9mIE9iamVjdC5rZXlzKCRzY29wZS5wbGFjZWhvbGRlcnMpXG4gICAgICAgICAgICB3YXRjaE9iamVjdHMucHVzaCBcInBsYWNlaG9sZGVycy4je25hbWV9XCJcblxuICAgICAgICAgICRzY29wZS4kd2F0Y2hHcm91cCh3YXRjaE9iamVjdHMsIC0+XG4gICAgICAgICAgICBpZiB0eXBlb2YgcGFyc2VJbnQoJHNjb3BlLmNvdW50KSAhPSAnbnVtYmVyJyBvciAkc2NvcGUuY291bnQgPT0gJydcbiAgICAgICAgICAgICAgcmV0dXJuXG5cbiAgICAgICAgICAgIHJlbmRlcigkc2NvcGUuY291bnQsICRzY29wZS5wbGFjZWhvbGRlcnMpXG4gICAgICAgICAgKVxuICAgICAgKVxuICBdXG4pKClcbiJdfQ==