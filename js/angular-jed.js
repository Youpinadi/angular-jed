var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

(function() {
  'use strict';
  var cache, commonDatas, defaultLang, extend, gettext, i18n, lang, ngettext, pageDatas, translationsPath;
  defaultLang = 'en_US';
  lang = defaultLang;
  i18n = false;
  translationsPath = false;
  pageDatas = false;
  commonDatas = {};
  cache = {};
  extend = function(object, properties) {
    var key, val;
    for (key in properties) {
      val = properties[key];
      object[key] = val;
    }
    return object;
  };
  gettext = function(key) {
    if (i18n) {
      return i18n.gettext(key);
    } else {
      return key;
    }
  };
  ngettext = function(singular_key, plural_key, value) {
    if (i18n) {
      return i18n.ngettext(singular_key, plural_key, value);
    } else {
      if (value === 1) {
        return singular_key;
      } else {
        return plural_key;
      }
    }
  };
  angular.module('jed', []);
  angular.module('jed').service('i18n', [
    '$http', '$rootScope', '$q', function($http, $rootScope, $q) {
      var get, jed, readyDeferred, setI18N;
      readyDeferred = $q.defer();
      get = function(file) {
        var deferred, varName;
        deferred = $q.defer();
        varName = file.replace('.json', '');
        if (window.translations && window.translations[varName]) {
          deferred.resolve(JSON.parse(window.translations[varName]));
        } else if (file in cache) {
          deferred.resolve(cache[file]);
        } else {
          $http.get("" + translationsPath + "/" + file).success(function(data) {
            cache[file] = data;
            return deferred.resolve(data);
          }).error(function() {
            return deferred.reject();
          });
        }
        return deferred.promise;
      };
      setI18N = function(data) {
        if (data == null) {
          data = false;
        }
        i18n = data ? new Jed(data) : void 0;
        $rootScope._ = function(key) {
          return jed._(key);
        };
        return $rootScope._n = function(singular_key, plural_key, value, placeholders, none) {
          return jed._n(singular_key, plural_key, value, placeholders, none);
        };
      };
      return jed = {
        setTranslationPath: function(path) {
          translationsPath = path;
          return jed;
        },
        setLang: function(value) {
          lang = value;
          return jed;
        },
        setDefaultLang: function(lang) {
          defaultLang = lang;
          return jed;
        },
        loadCommon: function(common) {
          var deferred;
          deferred = $q.defer();
          get("" + common + "-" + lang + ".json").then(function(data) {
            commonDatas = extend(commonDatas, data.locale_data.messages);
            if (pageDatas) {
              pageDatas.locale_data.messages = extend(pageDatas.locale_data.messages, commonDatas);
              setI18N(pageDatas);
            } else {
              setI18N(data);
            }
            readyDeferred.resolve();
            return deferred.resolve();
          }, function() {
            readyDeferred.resolve();
            return deferred.resolve();
          });
          return deferred.promise;
        },
        loadPage: function(page) {
          var deferred;
          deferred = $q.defer();
          get("" + page + "-" + lang + ".json").then(function(data) {
            data.locale_data.messages = extend(data.locale_data.messages, commonDatas);
            pageDatas = data;
            setI18N(data);
            readyDeferred.resolve();
            return deferred.resolve();
          }, function() {
            if (lang === defaultLang) {
              setI18N();
            } else {
              jed.loadPage(page);
            }
            readyDeferred.resolve();
            return deferred.resolve();
          });
          return deferred.promise;
        },
        _: function(key, placeholders) {
          var result;
          if (placeholders == null) {
            placeholders = {};
          }
          result = gettext(key);
          return _.template(result, placeholders, {
            interpolate: /%([\s\S]+?)%/g
          });
        },
        _n: function(singular, plural, count, placeholders, none) {
          var result;
          if (placeholders == null) {
            placeholders = {};
          }
          placeholders.count = count;
          if (count.toString() === '0' && none) {
            result = gettext(none);
          } else {
            result = ngettext(singular, plural, count);
          }
          return _.template(result, placeholders, {
            interpolate: /%([\s\S]+?)%/g
          });
        },
        ready: function() {
          return readyDeferred.promise;
        }
      };
    }
  ]);
  angular.module('jed').directive('trans', [
    'i18n', '$interpolate', '$locale', function(i18n, $interpolate, $locale) {
      var BRACE, WHITESPACE;
      BRACE = /{}/g;
      WHITESPACE = new RegExp(' ', 'g');
      return {
        restrict: 'AE',
        replace: true,
        link: function(scope, element, attr) {
          var countExp, exp, exprFn, expression, key, lastCount, ready, render, updateElementText, watchExps, whenExp, whens, _count, _i, _len, _ref;
          countExp = attr.count;
          whenExp = attr.$attr.when && element.attr(attr.$attr.when);
          whens = scope.$eval(whenExp);
          lastCount = null;
          ready = false;
          _count = false;
          watchExps = [];
          i18n.ready().then(function() {
            return render(_count);
          });
          for (key in whens) {
            expression = whens[key];
            exprFn = $interpolate(expression);
            _ref = exprFn.expressions;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              exp = _ref[_i];
              exp = exp.split('|')[0].replace(WHITESPACE, '');
              if (__indexOf.call(watchExps, exp) < 0) {
                watchExps.push(exp);
              }
            }
          }
          render = function(count) {
            var result, singular;
            result = false;
            if (count === 0 && angular.isDefined(whens[0])) {
              result = whens[0];
            }
            if (result) {
              result = i18n._(result);
            } else {
              singular = whens['one'] != null ? whens['one'] : whens['one'] = whens['singular'];
              result = i18n._n(singular, whens['plural'], count);
            }
            result = $interpolate(result);
            return updateElementText(result(scope));
          };
          scope.$watch(countExp, function(newVal) {
            var count, countIsNaN, nbrCount;
            count = parseInt(newVal);
            nbrCount = count;
            countIsNaN = isNaN(count);
            if (!countIsNaN && !(__indexOf.call(whens, count) >= 0)) {
              count = $locale.pluralCat(count);
            }
            if ((count !== lastCount) && !(countIsNaN && isNaN(lastCount))) {
              _count = nbrCount;
              render(nbrCount);
              return lastCount = nbrCount;
            }
          });
          scope.$watchGroup(watchExps, function() {
            return render(lastCount);
          });
          return updateElementText = function(text) {
            if (text) {
              return element.text(text);
            }
          };
        }
      };
    }
  ]);
  return angular.module('jed').filter('trans', function(i18n) {
    var transFilter;
    transFilter = function(text, options) {
      if (options == null) {
        options = {};
      }
      if (options.plural) {
        return i18n._n(text, options.plural, options.count, options.placeholders, options.none);
      } else {
        if (options.placeholders == null) {
          options.placeholders = {};
        }
        return i18n._(text, options.placeholders);
      }
    };
    transFilter.$stateful = true;
    return transFilter;
  });
})();

//# sourceMappingURL=data:application/json;base64,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QW9CLFNBQUMsSUFBRCxHQUFBO0FBQ2xCLFlBQUEsSUFBcUIsSUFBckI7cUJBQUEsT0FBTyxDQUFDLElBQVIsQ0FBYSxJQUFiLEVBQUE7YUFEa0I7VUFBQSxFQWpEaEI7UUFBQSxDQUZOO09BREYsQ0FIRjtJQUFBLENBSnVDO0dBQXpDLENBcklBLENBQUE7U0FxTUEsT0FBTyxDQUFDLE1BQVIsQ0FBZSxLQUFmLENBQXFCLENBQUMsTUFBdEIsQ0FBNkIsT0FBN0IsRUFBc0MsU0FBQyxJQUFELEdBQUE7QUFDcEMsUUFBQSxXQUFBO0FBQUEsSUFBQSxXQUFBLEdBQWMsU0FBQyxJQUFELEVBQU8sT0FBUCxHQUFBOztRQUFPLFVBQVU7T0FDN0I7QUFBQSxNQUFBLElBQUcsT0FBTyxDQUFDLE1BQVg7ZUFDRSxJQUFJLENBQUMsRUFBTCxDQUFRLElBQVIsRUFBYyxPQUFPLENBQUMsTUFBdEIsRUFBOEIsT0FBTyxDQUFDLEtBQXRDLEVBQTZDLE9BQU8sQ0FBQyxZQUFyRCxFQUFtRSxPQUFPLENBQUMsSUFBM0UsRUFERjtPQUFBLE1BQUE7O1VBR0UsT0FBTyxDQUFDLGVBQWdCO1NBQXhCO2VBQ0EsSUFBSSxDQUFDLENBQUwsQ0FBTyxJQUFQLEVBQWEsT0FBTyxDQUFDLFlBQXJCLEVBSkY7T0FEWTtJQUFBLENBQWQsQ0FBQTtBQUFBLElBT0EsV0FBVyxDQUFDLFNBQVosR0FBd0IsSUFQeEIsQ0FBQTtXQVNBLFlBVm9DO0VBQUEsQ0FBdEMsRUF0TUQ7QUFBQSxDQUFELENBQUEsQ0FBQSxDQUFBLENBQUEiLCJmaWxlIjoiYW5ndWxhci1qZWQuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyIoLT5cbiAgJ3VzZSBzdHJpY3QnXG5cbiAgZGVmYXVsdExhbmcgPSAnZW5fVVMnXG4gIGxhbmcgPSBkZWZhdWx0TGFuZ1xuICBpMThuID0gZmFsc2VcbiAgdHJhbnNsYXRpb25zUGF0aCA9IGZhbHNlXG4gIHBhZ2VEYXRhcyA9IGZhbHNlXG4gIGNvbW1vbkRhdGFzID0ge31cbiAgY2FjaGUgPSB7fVxuXG4gIGV4dGVuZCA9IChvYmplY3QsIHByb3BlcnRpZXMpIC0+XG4gICAgZm9yIGtleSwgdmFsIG9mIHByb3BlcnRpZXNcbiAgICAgIG9iamVjdFtrZXldID0gdmFsXG4gICAgb2JqZWN0XG5cbiAgZ2V0dGV4dCA9IChrZXkpIC0+XG4gICAgaWYgaTE4biB0aGVuIGkxOG4uZ2V0dGV4dChrZXkpIGVsc2Uga2V5XG5cbiAgbmdldHRleHQgPSAoc2luZ3VsYXJfa2V5LCBwbHVyYWxfa2V5LCB2YWx1ZSkgLT5cbiAgICBpZiBpMThuXG4gICAgICBpMThuLm5nZXR0ZXh0IHNpbmd1bGFyX2tleSwgcGx1cmFsX2tleSwgdmFsdWVcbiAgICBlbHNlXG4gICAgICBpZiB2YWx1ZSA9PSAxIHRoZW4gc2luZ3VsYXJfa2V5IGVsc2UgcGx1cmFsX2tleVxuXG4gIGFuZ3VsYXIubW9kdWxlICdqZWQnLCBbXVxuXG4gIGFuZ3VsYXIubW9kdWxlKCdqZWQnKS5zZXJ2aWNlICdpMThuJywgW1xuICAgICckaHR0cCdcbiAgICAnJHJvb3RTY29wZSdcbiAgICAnJHEnXG4gICAgKCRodHRwLCAkcm9vdFNjb3BlLCAkcSkgLT5cbiAgICAgIHJlYWR5RGVmZXJyZWQgPSAkcS5kZWZlcigpXG5cbiAgICAgICMgR2V0IGEgdHJhbnNsYXRpb24gZmlsZSBmcm9tIGNhY2hlIG9yIGFqYXhcbiAgICAgIGdldCA9IChmaWxlKSAtPlxuICAgICAgICBkZWZlcnJlZCA9ICRxLmRlZmVyKClcbiAgICAgICAgdmFyTmFtZSA9IGZpbGUucmVwbGFjZSgnLmpzb24nLCAnJylcbiAgICAgICAgaWYgd2luZG93LnRyYW5zbGF0aW9ucyBhbmQgd2luZG93LnRyYW5zbGF0aW9uc1t2YXJOYW1lXVxuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoSlNPTi5wYXJzZSB3aW5kb3cudHJhbnNsYXRpb25zW3Zhck5hbWVdKVxuICAgICAgICBlbHNlIGlmIGZpbGUgb2YgY2FjaGVcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGNhY2hlW2ZpbGVdKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgJGh0dHAuZ2V0KFwiI3t0cmFuc2xhdGlvbnNQYXRofS8je2ZpbGV9XCIpXG4gICAgICAgICAgICAuc3VjY2VzcyAoZGF0YSkgLT5cbiAgICAgICAgICAgICAgY2FjaGVbZmlsZV0gPSBkYXRhXG4gICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZGF0YSlcbiAgICAgICAgICAgIC5lcnJvciAtPlxuICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoKVxuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZVxuXG4gICAgICAjIEluaXRpYWxpemUgSmVkXG4gICAgICBzZXRJMThOID0gKGRhdGEgPSBmYWxzZSkgLT5cbiAgICAgICAgaTE4biA9IGlmIGRhdGEgdGhlbiBuZXcgSmVkKGRhdGEpXG5cbiAgICAgICAgJHJvb3RTY29wZS5fID0gKGtleSkgLT5cbiAgICAgICAgICBqZWQuXyhrZXkpXG5cbiAgICAgICAgJHJvb3RTY29wZS5fbiA9IChzaW5ndWxhcl9rZXksIHBsdXJhbF9rZXksIHZhbHVlLCBwbGFjZWhvbGRlcnMsIG5vbmUpIC0+XG4gICAgICAgICAgamVkLl9uKHNpbmd1bGFyX2tleSwgcGx1cmFsX2tleSwgdmFsdWUsIHBsYWNlaG9sZGVycywgbm9uZSlcblxuICAgICAgIyBQdWJsaWMgQVBJXG4gICAgICBqZWQgPVxuICAgICAgICBzZXRUcmFuc2xhdGlvblBhdGg6IChwYXRoKSAtPlxuICAgICAgICAgIHRyYW5zbGF0aW9uc1BhdGggPSBwYXRoXG4gICAgICAgICAgamVkXG5cbiAgICAgICAgc2V0TGFuZzogKHZhbHVlKSAtPlxuICAgICAgICAgIGxhbmcgPSB2YWx1ZVxuICAgICAgICAgIGplZFxuXG4gICAgICAgIHNldERlZmF1bHRMYW5nOiAobGFuZykgLT5cbiAgICAgICAgICBkZWZhdWx0TGFuZyA9IGxhbmdcbiAgICAgICAgICBqZWRcblxuICAgICAgICAjIExvYWQgY29tbW9uIHRyYW5zbGF0aW9uc1xuICAgICAgICBsb2FkQ29tbW9uOiAoY29tbW9uKSAtPlxuICAgICAgICAgIGRlZmVycmVkID0gJHEuZGVmZXIoKVxuICAgICAgICAgIGdldChcIiN7Y29tbW9ufS0je2xhbmd9Lmpzb25cIikudGhlbigoZGF0YSkgLT5cbiAgICAgICAgICAgICMgbm90IHN1cmUgdGhpcyBpcyBuZWVkZWQgdGhvXG4gICAgICAgICAgICBjb21tb25EYXRhcyA9IGV4dGVuZCBjb21tb25EYXRhcywgZGF0YS5sb2NhbGVfZGF0YS5tZXNzYWdlc1xuICAgICAgICAgICAgaWYgcGFnZURhdGFzXG4gICAgICAgICAgICAgIHBhZ2VEYXRhcy5sb2NhbGVfZGF0YS5tZXNzYWdlcyA9IGV4dGVuZCBwYWdlRGF0YXMubG9jYWxlX2RhdGEubWVzc2FnZXMsIGNvbW1vbkRhdGFzXG4gICAgICAgICAgICAgIHNldEkxOE4gcGFnZURhdGFzXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIHNldEkxOE4gZGF0YVxuICAgICAgICAgICAgcmVhZHlEZWZlcnJlZC5yZXNvbHZlKClcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoKVxuICAgICAgICAgICwgLT5cbiAgICAgICAgICAgIHJlYWR5RGVmZXJyZWQucmVzb2x2ZSgpXG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKClcbiAgICAgICAgICApXG4gICAgICAgICAgZGVmZXJyZWQucHJvbWlzZVxuXG4gICAgICAgICMgTG9hZCBwYWdlIHRyYW5zbGF0aW9uXG4gICAgICAgIGxvYWRQYWdlOiAocGFnZSkgLT5cbiAgICAgICAgICBkZWZlcnJlZCA9ICRxLmRlZmVyKClcbiAgICAgICAgICBnZXQoXCIje3BhZ2V9LSN7bGFuZ30uanNvblwiKS50aGVuKChkYXRhKSAtPlxuICAgICAgICAgICAgZGF0YS5sb2NhbGVfZGF0YS5tZXNzYWdlcyA9IGV4dGVuZCBkYXRhLmxvY2FsZV9kYXRhLm1lc3NhZ2VzLCBjb21tb25EYXRhc1xuICAgICAgICAgICAgcGFnZURhdGFzID0gZGF0YVxuICAgICAgICAgICAgc2V0STE4TiBkYXRhXG4gICAgICAgICAgICByZWFkeURlZmVycmVkLnJlc29sdmUoKVxuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpXG4gICAgICAgICAgLCAtPlxuICAgICAgICAgICAgaWYgbGFuZyA9PSBkZWZhdWx0TGFuZ1xuICAgICAgICAgICAgICBzZXRJMThOKClcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgamVkLmxvYWRQYWdlKHBhZ2UpXG4gICAgICAgICAgICByZWFkeURlZmVycmVkLnJlc29sdmUoKVxuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpXG4gICAgICAgICAgKVxuICAgICAgICAgIGRlZmVycmVkLnByb21pc2VcblxuICAgICAgICBfOiAoa2V5LCBwbGFjZWhvbGRlcnMgPSB7fSkgLT5cbiAgICAgICAgICByZXN1bHQgPSBnZXR0ZXh0KGtleSlcbiAgICAgICAgICBfLnRlbXBsYXRlKHJlc3VsdCwgcGxhY2Vob2xkZXJzLFxuICAgICAgICAgICAgaW50ZXJwb2xhdGU6IC8lKFtcXHNcXFNdKz8pJS9nXG4gICAgICAgICAgKVxuXG4gICAgICAgIF9uOiAoc2luZ3VsYXIsIHBsdXJhbCwgY291bnQsIHBsYWNlaG9sZGVycyA9IHt9LCBub25lKSAtPlxuICAgICAgICAgIHBsYWNlaG9sZGVycy5jb3VudCA9IGNvdW50XG4gICAgICAgICAgaWYgY291bnQudG9TdHJpbmcoKSA9PSAnMCcgYW5kIG5vbmVcbiAgICAgICAgICAgIHJlc3VsdCA9IGdldHRleHQgbm9uZVxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJlc3VsdCA9IG5nZXR0ZXh0IHNpbmd1bGFyLCBwbHVyYWwsIGNvdW50XG5cbiAgICAgICAgICBfLnRlbXBsYXRlKHJlc3VsdCwgcGxhY2Vob2xkZXJzLFxuICAgICAgICAgICAgaW50ZXJwb2xhdGU6IC8lKFtcXHNcXFNdKz8pJS9nXG4gICAgICAgICAgKVxuXG4gICAgICAgIHJlYWR5OiAtPlxuICAgICAgICAgIHJlYWR5RGVmZXJyZWQucHJvbWlzZVxuICBdXG5cbiAgYW5ndWxhci5tb2R1bGUoJ2plZCcpLmRpcmVjdGl2ZSAndHJhbnMnLCBbXG4gICAgJ2kxOG4nXG4gICAgJyRpbnRlcnBvbGF0ZSdcbiAgICAnJGxvY2FsZSdcbiAgICAoaTE4biwgJGludGVycG9sYXRlLCAkbG9jYWxlKSAtPlxuICAgICAgQlJBQ0UgPSAve30vZ1xuICAgICAgV0hJVEVTUEFDRSA9IG5ldyBSZWdFeHAoJyAnLCAnZycpXG4gICAgICByZXR1cm4gKFxuICAgICAgICByZXN0cmljdDogJ0FFJ1xuICAgICAgICByZXBsYWNlOiB0cnVlXG4gICAgICAgIGxpbms6IChzY29wZSwgZWxlbWVudCwgYXR0cikgLT5cbiAgICAgICAgICBjb3VudEV4cCA9IGF0dHIuY291bnRcbiAgICAgICAgICB3aGVuRXhwID0gYXR0ci4kYXR0ci53aGVuICYmIGVsZW1lbnQuYXR0ciBhdHRyLiRhdHRyLndoZW5cbiAgICAgICAgICB3aGVucyA9IHNjb3BlLiRldmFsIHdoZW5FeHBcbiAgICAgICAgICBsYXN0Q291bnQgPSBudWxsXG4gICAgICAgICAgcmVhZHkgPSBmYWxzZVxuICAgICAgICAgIF9jb3VudCA9IGZhbHNlXG4gICAgICAgICAgd2F0Y2hFeHBzID0gW11cblxuICAgICAgICAgIGkxOG4ucmVhZHkoKS50aGVuIC0+XG4gICAgICAgICAgICByZW5kZXIoX2NvdW50KVxuXG4gICAgICAgICAgZm9yIGtleSwgZXhwcmVzc2lvbiBvZiB3aGVuc1xuICAgICAgICAgICAgZXhwckZuID0gJGludGVycG9sYXRlKGV4cHJlc3Npb24pXG4gICAgICAgICAgICBmb3IgZXhwIGluIGV4cHJGbi5leHByZXNzaW9uc1xuICAgICAgICAgICAgICBleHAgPSBleHAuc3BsaXQoJ3wnKVswXS5yZXBsYWNlKFdISVRFU1BBQ0UsICcnKVxuICAgICAgICAgICAgICB3YXRjaEV4cHMucHVzaCBleHAgdW5sZXNzIGV4cCBpbiB3YXRjaEV4cHNcblxuICAgICAgICAgIHJlbmRlciA9IChjb3VudCkgLT5cbiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlXG4gICAgICAgICAgICBpZiBjb3VudCA9PSAwIGFuZCBhbmd1bGFyLmlzRGVmaW5lZCB3aGVuc1swXVxuICAgICAgICAgICAgICByZXN1bHQgPSB3aGVuc1swXVxuXG4gICAgICAgICAgICBpZiByZXN1bHRcbiAgICAgICAgICAgICAgcmVzdWx0ID0gaTE4bi5fIHJlc3VsdFxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICBzaW5ndWxhciA9IHdoZW5zWydvbmUnXSA/PSB3aGVuc1snc2luZ3VsYXInXVxuICAgICAgICAgICAgICByZXN1bHQgPSBpMThuLl9uIHNpbmd1bGFyLCB3aGVuc1sncGx1cmFsJ10sIGNvdW50XG5cbiAgICAgICAgICAgIHJlc3VsdCA9ICRpbnRlcnBvbGF0ZShyZXN1bHQpXG4gICAgICAgICAgICB1cGRhdGVFbGVtZW50VGV4dCByZXN1bHQoc2NvcGUpXG5cbiAgICAgICAgICBzY29wZS4kd2F0Y2ggY291bnRFeHAsIChuZXdWYWwpIC0+XG4gICAgICAgICAgICBjb3VudCA9IHBhcnNlSW50IG5ld1ZhbFxuICAgICAgICAgICAgbmJyQ291bnQgPSBjb3VudFxuXG4gICAgICAgICAgICBjb3VudElzTmFOID0gaXNOYU4gY291bnRcblxuICAgICAgICAgICAgaWYgIWNvdW50SXNOYU4gJiYgIShjb3VudCBpbiB3aGVucylcbiAgICAgICAgICAgICAgY291bnQgPSAkbG9jYWxlLnBsdXJhbENhdCBjb3VudFxuXG4gICAgICAgICAgICBpZiAoY291bnQgIT0gbGFzdENvdW50KSAmJiAhKGNvdW50SXNOYU4gJiYgaXNOYU4obGFzdENvdW50KSlcbiAgICAgICAgICAgICAgX2NvdW50ID0gbmJyQ291bnRcbiAgICAgICAgICAgICAgcmVuZGVyKG5ickNvdW50KVxuICAgICAgICAgICAgICBsYXN0Q291bnQgPSBuYnJDb3VudFxuXG4gICAgICAgICAgc2NvcGUuJHdhdGNoR3JvdXAgd2F0Y2hFeHBzLCAtPlxuICAgICAgICAgICAgcmVuZGVyKGxhc3RDb3VudClcblxuICAgICAgICAgIHVwZGF0ZUVsZW1lbnRUZXh0ID0gKHRleHQpIC0+XG4gICAgICAgICAgICBlbGVtZW50LnRleHQgdGV4dCBpZiB0ZXh0XG4gICAgICApXG4gIF1cblxuICBhbmd1bGFyLm1vZHVsZSgnamVkJykuZmlsdGVyICd0cmFucycsIChpMThuKSAtPlxuICAgIHRyYW5zRmlsdGVyID0gKHRleHQsIG9wdGlvbnMgPSB7fSkgLT5cbiAgICAgIGlmIG9wdGlvbnMucGx1cmFsXG4gICAgICAgIGkxOG4uX24odGV4dCwgb3B0aW9ucy5wbHVyYWwsIG9wdGlvbnMuY291bnQsIG9wdGlvbnMucGxhY2Vob2xkZXJzLCBvcHRpb25zLm5vbmUpXG4gICAgICBlbHNlXG4gICAgICAgIG9wdGlvbnMucGxhY2Vob2xkZXJzID89IHt9XG4gICAgICAgIGkxOG4uXyB0ZXh0LCBvcHRpb25zLnBsYWNlaG9sZGVyc1xuXG4gICAgdHJhbnNGaWx0ZXIuJHN0YXRlZnVsID0gdHJ1ZVxuXG4gICAgdHJhbnNGaWx0ZXJcbikoKVxuIl19