'use strict';
var app;

app = angular.module('app', ['ngRoute', 'ngCookies', 'jed']);

app.config([
  '$routeProvider', '$locationProvider', function($routeProvider, $locationProvider) {
    return $routeProvider.when('/home', {
      templateUrl: 'partials/home.html',
      controller: 'HomeController'
    }).otherwise({
      redirectTo: '/home'
    });
  }
]).run([
  '$rootScope', 'i18n', function($rootScope, i18n) {
    var defaultLang;
    defaultLang = 'en_US';
    $rootScope.getLang = function() {
      if (store.get('lang')) {
        return store.get('lang');
      } else {
        return defaultLang;
      }
    };
    i18n.setTranslationPath('translations').setDefaultLang(defaultLang).setLang($rootScope.getLang());
    $rootScope.$on('$viewContentLoaded', Prism.highlightAll);
    return $rootScope.githubLink = 'https://github.com/romainberger/angular-jed';
  }
]);

app.controller('HomeController', [
  '$scope', 'i18n', function($scope, i18n) {
    i18n.loadPage('home').then(function() {
      return $scope.title = i18n._('Text translated from the controller');
    });
    $scope.nbr = 10;
    return $scope.user = 'Michael Jackson';
  }
]);

app.directive('language', function() {
  return {
    restrict: 'E',
    template: '<div> <span ng-repeat="lang in languages"> <button class="btn btn-default" ng-class="{\'btn-primary\': currentLang() == lang.value}" ng-click="changeLang(lang.value)">{{ lang.name }}</button> </span> </div>',
    controller: function($scope, $rootScope, $window, i18n) {
      $scope.languages = [
        {
          name: 'English',
          value: 'en_US'
        }, {
          name: 'French',
          value: 'fr_FR'
        }
      ];
      $scope.changeLang = function(value) {
        store.set('lang', value);
        return $window.location.reload();
      };
      return $scope.currentLang = function() {
        return $rootScope.getLang();
      };
    }
  };
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBQSxDQUFBO0FBQUEsSUFBQSxHQUFBOztBQUFBLEdBRUEsR0FBTSxPQUFPLENBQUMsTUFBUixDQUFlLEtBQWYsRUFBc0IsQ0FDMUIsU0FEMEIsRUFFMUIsV0FGMEIsRUFHMUIsS0FIMEIsQ0FBdEIsQ0FGTixDQUFBOztBQUFBLEdBUUcsQ0FBQyxNQUFKLENBQVc7RUFDVCxnQkFEUyxFQUVULG1CQUZTLEVBR1QsU0FBQyxjQUFELEVBQWlCLGlCQUFqQixHQUFBO1dBQ0UsY0FDRSxDQUFDLElBREgsQ0FDUSxPQURSLEVBRUk7QUFBQSxNQUFBLFdBQUEsRUFBYSxvQkFBYjtBQUFBLE1BQ0EsVUFBQSxFQUFZLGdCQURaO0tBRkosQ0FJRSxDQUFDLFNBSkgsQ0FLSTtBQUFBLE1BQUEsVUFBQSxFQUFZLE9BQVo7S0FMSixFQURGO0VBQUEsQ0FIUztDQUFYLENBV0EsQ0FBQyxHQVhELENBV0s7RUFDSCxZQURHLEVBRUgsTUFGRyxFQUdILFNBQUMsVUFBRCxFQUFhLElBQWIsR0FBQTtBQUNFLFFBQUEsV0FBQTtBQUFBLElBQUEsV0FBQSxHQUFjLE9BQWQsQ0FBQTtBQUFBLElBQ0EsVUFBVSxDQUFDLE9BQVgsR0FBcUIsU0FBQSxHQUFBO0FBQ25CLE1BQUEsSUFBRyxLQUFLLENBQUMsR0FBTixDQUFVLE1BQVYsQ0FBSDtlQUEwQixLQUFLLENBQUMsR0FBTixDQUFVLE1BQVYsRUFBMUI7T0FBQSxNQUFBO2VBQWlELFlBQWpEO09BRG1CO0lBQUEsQ0FEckIsQ0FBQTtBQUFBLElBSUEsSUFBSSxDQUFDLGtCQUFMLENBQXdCLGNBQXhCLENBQ0UsQ0FBQyxjQURILENBQ2tCLFdBRGxCLENBRUUsQ0FBQyxPQUZILENBRVcsVUFBVSxDQUFDLE9BQVgsQ0FBQSxDQUZYLENBSkEsQ0FBQTtBQUFBLElBUUEsVUFBVSxDQUFDLEdBQVgsQ0FBZSxvQkFBZixFQUFxQyxLQUFLLENBQUMsWUFBM0MsQ0FSQSxDQUFBO1dBVUEsVUFBVSxDQUFDLFVBQVgsR0FBd0IsOENBWDFCO0VBQUEsQ0FIRztDQVhMLENBUkEsQ0FBQTs7QUFBQSxHQW9DRyxDQUFDLFVBQUosQ0FBZSxnQkFBZixFQUFpQztFQUMvQixRQUQrQixFQUUvQixNQUYrQixFQUcvQixTQUFDLE1BQUQsRUFBUyxJQUFULEdBQUE7QUFDRSxJQUFBLElBQUksQ0FBQyxRQUFMLENBQWMsTUFBZCxDQUFxQixDQUFDLElBQXRCLENBQTJCLFNBQUEsR0FBQTthQUN6QixNQUFNLENBQUMsS0FBUCxHQUFlLElBQUksQ0FBQyxDQUFMLENBQU8scUNBQVAsRUFEVTtJQUFBLENBQTNCLENBQUEsQ0FBQTtBQUFBLElBR0EsTUFBTSxDQUFDLEdBQVAsR0FBYSxFQUhiLENBQUE7V0FJQSxNQUFNLENBQUMsSUFBUCxHQUFjLGtCQUxoQjtFQUFBLENBSCtCO0NBQWpDLENBcENBLENBQUE7O0FBQUEsR0ErQ0csQ0FBQyxTQUFKLENBQWMsVUFBZCxFQUEwQixTQUFBLEdBQUE7QUFDeEIsU0FDRTtBQUFBLElBQUEsUUFBQSxFQUFVLEdBQVY7QUFBQSxJQUNBLFFBQUEsRUFBVSxnTkFEVjtBQUFBLElBTUEsVUFBQSxFQUFZLFNBQUMsTUFBRCxFQUFTLFVBQVQsRUFBcUIsT0FBckIsRUFBOEIsSUFBOUIsR0FBQTtBQUNWLE1BQUEsTUFBTSxDQUFDLFNBQVAsR0FBbUI7UUFDakI7QUFBQSxVQUNFLElBQUEsRUFBTSxTQURSO0FBQUEsVUFFRSxLQUFBLEVBQU8sT0FGVDtTQURpQixFQUtqQjtBQUFBLFVBQ0UsSUFBQSxFQUFNLFFBRFI7QUFBQSxVQUVFLEtBQUEsRUFBTyxPQUZUO1NBTGlCO09BQW5CLENBQUE7QUFBQSxNQVdBLE1BQU0sQ0FBQyxVQUFQLEdBQW9CLFNBQUMsS0FBRCxHQUFBO0FBQ2xCLFFBQUEsS0FBSyxDQUFDLEdBQU4sQ0FBVSxNQUFWLEVBQWtCLEtBQWxCLENBQUEsQ0FBQTtlQUNBLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBakIsQ0FBQSxFQUZrQjtNQUFBLENBWHBCLENBQUE7YUFlQSxNQUFNLENBQUMsV0FBUCxHQUFxQixTQUFBLEdBQUE7ZUFDbkIsVUFBVSxDQUFDLE9BQVgsQ0FBQSxFQURtQjtNQUFBLEVBaEJYO0lBQUEsQ0FOWjtHQURGLENBRHdCO0FBQUEsQ0FBMUIsQ0EvQ0EsQ0FBQSIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuYXBwID0gYW5ndWxhci5tb2R1bGUgJ2FwcCcsIFtcbiAgJ25nUm91dGUnXG4gICduZ0Nvb2tpZXMnXG4gICdqZWQnXG5dXG5cbmFwcC5jb25maWcoW1xuICAnJHJvdXRlUHJvdmlkZXInXG4gICckbG9jYXRpb25Qcm92aWRlcidcbiAgKCRyb3V0ZVByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlcikgLT5cbiAgICAkcm91dGVQcm92aWRlclxuICAgICAgLndoZW4gJy9ob21lJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdwYXJ0aWFscy9ob21lLmh0bWwnXG4gICAgICAgIGNvbnRyb2xsZXI6ICdIb21lQ29udHJvbGxlcidcbiAgICAgIC5vdGhlcndpc2VcbiAgICAgICAgcmVkaXJlY3RUbzogJy9ob21lJ1xuXSlcbi5ydW4oW1xuICAnJHJvb3RTY29wZSdcbiAgJ2kxOG4nXG4gICgkcm9vdFNjb3BlLCBpMThuKSAtPlxuICAgIGRlZmF1bHRMYW5nID0gJ2VuX1VTJ1xuICAgICRyb290U2NvcGUuZ2V0TGFuZyA9IC0+XG4gICAgICBpZiBzdG9yZS5nZXQoJ2xhbmcnKSB0aGVuIHN0b3JlLmdldCgnbGFuZycpIGVsc2UgZGVmYXVsdExhbmdcblxuICAgIGkxOG4uc2V0VHJhbnNsYXRpb25QYXRoICd0cmFuc2xhdGlvbnMnXG4gICAgICAuc2V0RGVmYXVsdExhbmcgZGVmYXVsdExhbmdcbiAgICAgIC5zZXRMYW5nICRyb290U2NvcGUuZ2V0TGFuZygpXG5cbiAgICAkcm9vdFNjb3BlLiRvbiAnJHZpZXdDb250ZW50TG9hZGVkJywgUHJpc20uaGlnaGxpZ2h0QWxsXG5cbiAgICAkcm9vdFNjb3BlLmdpdGh1YkxpbmsgPSAnaHR0cHM6Ly9naXRodWIuY29tL3JvbWFpbmJlcmdlci9hbmd1bGFyLWplZCdcbl0pXG5cbmFwcC5jb250cm9sbGVyKCdIb21lQ29udHJvbGxlcicsIFtcbiAgJyRzY29wZSdcbiAgJ2kxOG4nXG4gICgkc2NvcGUsIGkxOG4pIC0+XG4gICAgaTE4bi5sb2FkUGFnZSgnaG9tZScpLnRoZW4gLT5cbiAgICAgICRzY29wZS50aXRsZSA9IGkxOG4uXyAnVGV4dCB0cmFuc2xhdGVkIGZyb20gdGhlIGNvbnRyb2xsZXInXG5cbiAgICAkc2NvcGUubmJyID0gMTBcbiAgICAkc2NvcGUudXNlciA9ICdNaWNoYWVsIEphY2tzb24nXG5dKVxuXG5hcHAuZGlyZWN0aXZlICdsYW5ndWFnZScsIC0+XG4gIHJldHVybiAoXG4gICAgcmVzdHJpY3Q6ICdFJ1xuICAgIHRlbXBsYXRlOiAnPGRpdj5cbiAgICAgICAgICAgICAgICA8c3BhbiBuZy1yZXBlYXQ9XCJsYW5nIGluIGxhbmd1YWdlc1wiPlxuICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdFwiIG5nLWNsYXNzPVwie1xcJ2J0bi1wcmltYXJ5XFwnOiBjdXJyZW50TGFuZygpID09IGxhbmcudmFsdWV9XCIgbmctY2xpY2s9XCJjaGFuZ2VMYW5nKGxhbmcudmFsdWUpXCI+e3sgbGFuZy5uYW1lIH19PC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICA8L2Rpdj4nXG4gICAgY29udHJvbGxlcjogKCRzY29wZSwgJHJvb3RTY29wZSwgJHdpbmRvdywgaTE4bikgLT5cbiAgICAgICRzY29wZS5sYW5ndWFnZXMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnRW5nbGlzaCdcbiAgICAgICAgICB2YWx1ZTogJ2VuX1VTJ1xuICAgICAgICB9XG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnRnJlbmNoJ1xuICAgICAgICAgIHZhbHVlOiAnZnJfRlInXG4gICAgICAgIH1cbiAgICAgIF1cblxuICAgICAgJHNjb3BlLmNoYW5nZUxhbmcgPSAodmFsdWUpIC0+XG4gICAgICAgIHN0b3JlLnNldCAnbGFuZycsIHZhbHVlXG4gICAgICAgICR3aW5kb3cubG9jYXRpb24ucmVsb2FkKClcblxuICAgICAgJHNjb3BlLmN1cnJlbnRMYW5nID0gLT5cbiAgICAgICAgJHJvb3RTY29wZS5nZXRMYW5nKClcbiAgKVxuIl19