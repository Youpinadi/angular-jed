'use strict';
var app;

app = angular.module('app', ['ngRoute', 'ngCookies', 'jed']);

app.config([
  '$routeProvider', '$locationProvider', function($routeProvider, $locationProvider) {
    return $routeProvider.when('/home', {
      templateUrl: 'partials/home.html',
      controller: 'HomeController'
    }).otherwise({
      redirectTo: '/home'
    });
  }
]).run([
  '$rootScope', 'i18n', function($rootScope, i18n) {
    var defaultLang;
    defaultLang = 'en_US';
    $rootScope.getLang = function() {
      if (store.get('lang')) {
        return store.get('lang');
      } else {
        return defaultLang;
      }
    };
    i18n.setTranslationPath('translations').setDefaultLang(defaultLang).setLang($rootScope.getLang());
    $rootScope.$on('$viewContentLoaded', Prism.highlightAll);
    return $rootScope.githubLink = 'https://github.com/romainberger/angular-jed';
  }
]);

app.controller('HomeController', [
  '$scope', 'i18n', function($scope, i18n) {
    i18n.loadPage('home').then(function() {
      return $scope.title = i18n._('{{ username }} is the king of the pop', {
        username: $scope.username
      });
    });
    $scope.nbr = 10000;
    return $scope.username = 'Michael Jackson';
  }
]);

app.directive('language', function() {
  return {
    restrict: 'E',
    template: '<div> <span ng-repeat="lang in languages"> <button class="btn btn-default" ng-class="{\'btn-primary\': currentLang() == lang.value}" ng-click="changeLang(lang.value)">{{ lang.name }}</button> </span> </div>',
    controller: function($scope, $rootScope, $window, i18n) {
      $scope.languages = [
        {
          name: 'English',
          value: 'en_US'
        }, {
          name: 'French',
          value: 'fr_FR'
        }
      ];
      $scope.changeLang = function(value) {
        store.set('lang', value);
        return $window.location.reload();
      };
      return $scope.currentLang = function() {
        return $rootScope.getLang();
      };
    }
  };
});

//# sourceMappingURL=data:application/json;base64,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ZUFDQSxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQWpCLENBQUEsRUFGa0I7TUFBQSxDQVhwQixDQUFBO2FBZUEsTUFBTSxDQUFDLFdBQVAsR0FBcUIsU0FBQSxHQUFBO2VBQ25CLFVBQVUsQ0FBQyxPQUFYLENBQUEsRUFEbUI7TUFBQSxFQWhCWDtJQUFBLENBTlo7R0FERixDQUR3QjtBQUFBLENBQTFCLENBL0NBLENBQUEiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmFwcCA9IGFuZ3VsYXIubW9kdWxlICdhcHAnLCBbXG4gICduZ1JvdXRlJ1xuICAnbmdDb29raWVzJ1xuICAnamVkJ1xuXVxuXG5hcHAuY29uZmlnKFtcbiAgJyRyb3V0ZVByb3ZpZGVyJ1xuICAnJGxvY2F0aW9uUHJvdmlkZXInXG4gICgkcm91dGVQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIC0+XG4gICAgJHJvdXRlUHJvdmlkZXJcbiAgICAgIC53aGVuICcvaG9tZScsXG4gICAgICAgIHRlbXBsYXRlVXJsOiAncGFydGlhbHMvaG9tZS5odG1sJ1xuICAgICAgICBjb250cm9sbGVyOiAnSG9tZUNvbnRyb2xsZXInXG4gICAgICAub3RoZXJ3aXNlXG4gICAgICAgIHJlZGlyZWN0VG86ICcvaG9tZSdcbl0pXG4ucnVuKFtcbiAgJyRyb290U2NvcGUnXG4gICdpMThuJ1xuICAoJHJvb3RTY29wZSwgaTE4bikgLT5cbiAgICBkZWZhdWx0TGFuZyA9ICdlbl9VUydcbiAgICAkcm9vdFNjb3BlLmdldExhbmcgPSAtPlxuICAgICAgaWYgc3RvcmUuZ2V0KCdsYW5nJykgdGhlbiBzdG9yZS5nZXQoJ2xhbmcnKSBlbHNlIGRlZmF1bHRMYW5nXG5cbiAgICBpMThuLnNldFRyYW5zbGF0aW9uUGF0aCAndHJhbnNsYXRpb25zJ1xuICAgICAgLnNldERlZmF1bHRMYW5nIGRlZmF1bHRMYW5nXG4gICAgICAuc2V0TGFuZyAkcm9vdFNjb3BlLmdldExhbmcoKVxuXG4gICAgJHJvb3RTY29wZS4kb24gJyR2aWV3Q29udGVudExvYWRlZCcsIFByaXNtLmhpZ2hsaWdodEFsbFxuXG4gICAgJHJvb3RTY29wZS5naXRodWJMaW5rID0gJ2h0dHBzOi8vZ2l0aHViLmNvbS9yb21haW5iZXJnZXIvYW5ndWxhci1qZWQnXG5dKVxuXG5hcHAuY29udHJvbGxlcignSG9tZUNvbnRyb2xsZXInLCBbXG4gICckc2NvcGUnXG4gICdpMThuJ1xuICAoJHNjb3BlLCBpMThuKSAtPlxuICAgIGkxOG4ubG9hZFBhZ2UoJ2hvbWUnKS50aGVuIC0+XG4gICAgICAkc2NvcGUudGl0bGUgPSBpMThuLl8gJ3t7IHVzZXJuYW1lIH19IGlzIHRoZSBraW5nIG9mIHRoZSBwb3AnLCB7dXNlcm5hbWU6ICRzY29wZS51c2VybmFtZX1cblxuICAgICRzY29wZS5uYnIgPSAxMDAwMFxuICAgICRzY29wZS51c2VybmFtZSA9ICdNaWNoYWVsIEphY2tzb24nXG5dKVxuXG5hcHAuZGlyZWN0aXZlICdsYW5ndWFnZScsIC0+XG4gIHJldHVybiAoXG4gICAgcmVzdHJpY3Q6ICdFJ1xuICAgIHRlbXBsYXRlOiAnPGRpdj5cbiAgICAgICAgICAgICAgICA8c3BhbiBuZy1yZXBlYXQ9XCJsYW5nIGluIGxhbmd1YWdlc1wiPlxuICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdFwiIG5nLWNsYXNzPVwie1xcJ2J0bi1wcmltYXJ5XFwnOiBjdXJyZW50TGFuZygpID09IGxhbmcudmFsdWV9XCIgbmctY2xpY2s9XCJjaGFuZ2VMYW5nKGxhbmcudmFsdWUpXCI+e3sgbGFuZy5uYW1lIH19PC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICA8L2Rpdj4nXG4gICAgY29udHJvbGxlcjogKCRzY29wZSwgJHJvb3RTY29wZSwgJHdpbmRvdywgaTE4bikgLT5cbiAgICAgICRzY29wZS5sYW5ndWFnZXMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnRW5nbGlzaCdcbiAgICAgICAgICB2YWx1ZTogJ2VuX1VTJ1xuICAgICAgICB9XG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnRnJlbmNoJ1xuICAgICAgICAgIHZhbHVlOiAnZnJfRlInXG4gICAgICAgIH1cbiAgICAgIF1cblxuICAgICAgJHNjb3BlLmNoYW5nZUxhbmcgPSAodmFsdWUpIC0+XG4gICAgICAgIHN0b3JlLnNldCAnbGFuZycsIHZhbHVlXG4gICAgICAgICR3aW5kb3cubG9jYXRpb24ucmVsb2FkKClcblxuICAgICAgJHNjb3BlLmN1cnJlbnRMYW5nID0gLT5cbiAgICAgICAgJHJvb3RTY29wZS5nZXRMYW5nKClcbiAgKVxuIl19